plugins {
    id 'java'
    id("io.freefair.lombok") version "8.2.2"
    id 'application'
    id 'jacoco'
}

group = 'by.sakujj'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility '17'
    targetCompatibility '17'
}

application {
    mainClass = 'by.sakujj.ApplicationRunner'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.0.0-M4'
    testImplementation 'org.assertj:assertj-core:3.24.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors()

    finalizedBy jacocoTestReport // report is always generated after tests run
}


jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "by/sakujj/**/exceptions/*",
                    "by/sakujj/**/model/*",
            ])
        }))
    }

    dependsOn test // tests are required to run before generating the report
}

jar {
    duplicatesStrategy = "EXCLUDE"
    manifest {
        attributes "Main-Class": application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}